name: Plugin_update

on:
  workflow_dispatch:
  schedule:
    - cron: "0 20 * * *"
  push:
    branches:
      - main
    paths:
      - 'scripts/*'
      #- '.github/workflows/Plugin_update.yml'
      
jobs:
  Plugin_update:
    runs-on: ubuntu-latest

    steps:
    - name: Set up time zone
      run: sudo timedatectl set-timezone Asia/Shanghai

    - name: Checkout repository
      uses: actions/checkout@main
      
    - name: Get last commit files
      id: last_commit
      run: |
         echo "sha=$(git rev-parse HEAD)" >> $GITHUB_ENV

    - name: Get changed files
      id: file_conf
      run: |
        COMMIT=${{ env.sha }}
        URL="https://api.github.com/repos/${{ github.repository }}/compare/${COMMIT}^...${COMMIT}"
        conf_File=$(curl -s -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" $URL | jq -r '.files[] | select(.filename | test("^scripts/.*\\.conf$")) | .filename')
        echo conf_File=$conf_File >> $GITHUB_OUTPUT
          
    - name: Update Plugin
      run: |
        script_folder="scripts" #存放配置和脚本
        loon_plugin_folder="loon/plugin" #存放生成后的Loon插件
        base_url="https://raw.githubusercontent.com/$GITHUB_REPOSITORY/${GITHUB_REF##*/}/"
        current_year=$(date +'%Y')
        current_date=$(date "+%Y-%m-%d %H:%M:%S")
        previous_year_1=$((current_year - 1))
        previous_year_2=$((current_year - 2))
        conf_File="${{ steps.file_conf.outputs.conf_File }}"
        [ -z "$conf_File" ] && conf_File=$(find "$script_folder" -maxdepth 1 -name '*.conf')

        mkdir -p "$script_folder" "$script_folder" "$loon_plugin_folder" tmp
        for conf_file in $conf_File; do
            if [ -f "$conf_file" ]; then
                grep -q '^#!url' "$conf_file" || sed -i "1i #!url = $(grep "^http" $conf_file)" $conf_file && sed -i '/^http/d' $conf_file
                grep -q '^#!tag' "$conf_file" || sed -i '2i\#!tag = ' "$conf_file"
                grep -q '^# ===' "$conf_file" || sed -i '3i\# =============================== 以下值将会覆盖插件中的默认参数 ===============================' "$conf_file"
                
                download_url=$(grep -i "#!url" $conf_file | awk -F '=' '{print $2}' | sed 's/^[[:space:]]*//; s/[[:space:]]*$//; s/%0D//')
                download_file="tmp/$(basename "$conf_file" .conf)/$(basename "$download_url")"
                [ -n "$download_url" ] && { mkdir -p "tmp/$(basename "$conf_file" .conf)/" && wget -O "$download_file" "$download_url"; }
                
                name=$(grep -i "#!name" $conf_file | awk -F '=' '{print $2}' | sed 's/^[[:space:]]*//; s/[[:space:]]*$//; s/%0D//')
                [ -z "$name" ] && name=$(grep -i "#!name" $download_file | awk -F '=' '{print $2}' | sed 's/^[[:space:]]*//; s/[[:space:]]*$//; s/%0D//')
                [ -z "$name" ] && name=$(basename "$conf_file" .conf)
                
                desc=$(grep -i "#!desc" $conf_file | awk -F '=' '{print $2}' | sed 's/^[[:space:]]*//; s/[[:space:]]*$//; s/%0D//')
                [ -z "$desc" ] && desc=$(grep -i "#!desc" $download_file | awk -F '=' '{print $2}' | sed 's/^[[:space:]]*//; s/[[:space:]]*$//; s/%0D//')
                [ -z "$desc" ] && desc="仅供学习和个人使用，不得用于商业目的或其他非法用途"
                
                openUrl=$(grep -i "#!openUrl" $conf_file | awk -F '=' '{print $2}' | sed 's/^[[:space:]]*//; s/[[:space:]]*$//; s/%0D//')
                [ -z "$openUrl" ] && openUrl=$(grep -i "#!openUrl" $download_file | awk -F '=' '{print $2}' | sed 's/^[[:space:]]*//; s/[[:space:]]*$//; s/%0D//')
                
                author=$(grep -i "#!author" "$conf_file" | awk -F '=' '{print $2}' | sed 's/^[[:space:]]*//; s/[[:space:]]*$//; s/%0D//')
                [ -z "$author" ] && author=$(grep -i "#!author" "$download_file" | awk -F '=' '{print $2}' | sed 's/^[[:space:]]*//; s/[[:space:]]*$//; s/%0D//')
                
                homepage=$(grep -i "#!homepage" $conf_file | awk -F '=' '{print $2}' | sed 's/^[[:space:]]*//; s/[[:space:]]*$//; s/%0D//')
                [ -z "$homepage" ] && homepage=$(grep -i "#!homepage" $download_file | awk -F '=' '{print $2}' | sed 's/^[[:space:]]*//; s/[[:space:]]*$//; s/%0D//')
                
                icon=$(grep -i "#!icon" $conf_file | awk -F '=' '{print $2}' | sed 's/^[[:space:]]*//; s/[[:space:]]*$//; s/%0D//')
                [ -z "$icon" ] && icon=$(grep -i "#!icon" $download_file | awk -F '=' '{print $2}' | sed 's/^[[:space:]]*//; s/[[:space:]]*$//; s/%0D//')
                
                select=$(grep -i "#!select" $conf_file | awk -F '=' '{print $2}' | sed 's/^[[:space:]]*//; s/[[:space:]]*$//; s/%0D//')
                [ -z "$select" ] && select=$(grep -i "#!select" $download_file | awk -F '=' '{print $2}' | sed 's/^[[:space:]]*//; s/[[:space:]]*$//; s/%0D//')
                
                input=$(grep -i "#!input" $conf_file | awk -F '=' '{print $2}' | sed 's/^[[:space:]]*//; s/[[:space:]]*$//; s/%0D//')
                [ -z "$input" ] && input=$(grep -i "#!input" $download_file | awk -F '=' '{print $2}' | sed 's/^[[:space:]]*//; s/[[:space:]]*$//; s/%0D//')
                
                date=$(grep -i "#!date" $conf_file | awk -F '=' '{print $2}' | sed 's/^[[:space:]]*//; s/[[:space:]]*$//; s/%0D//')
                [ -z "$date" ] && date=$(awk '/\/\*/,/\*\// || /#/' "$download_file" | grep -oEm 1 "$current_year[-/年.][[:digit:]]{1,2}[-/年.][[:digit:]]{1,2}|$previous_year_1[-/年.][[:digit:]]{1,2}[-/年.][[:digit:]]{1,2}|$previous_year_2[-/年.][[:digit:]]{1,2}[-/年.][[:digit:]]{1,2}" || grep -i "#!date" $download_file | awk -F '=' '{print $2}' | sed 's/^[[:space:]]*//; s/[[:space:]]*$//; s/%0D//')
                [ -z "$date" ] && { date="$current_date"; grep -q '^#!date' "$conf_file" && sed -i "s/^#!date.*/#!date = $current_date/" "$conf_file" || echo -e "\n#!date = $current_date" >> "$conf_file"; }
                date=$(echo "$date" | sed 's/[\/年.]/-/g; /[0-9]\{4\}-[0-9]\{2\}-[0-9]\{2\} [0-9]\{2\}:[0-9]\{2\}:[0-9]\{2\}/! s/$/ 00:00:00/')

                plugin_file="tmp/$(basename "$conf_file" .conf).plugin"
                [[ "$download_url" == *.plugin ]] && echo -e "/*\n插件引用"$download_url"\n*/" > "$plugin_file"
                echo "#!name = $name" >> "$plugin_file"
                echo "#!desc = $desc" >> "$plugin_file"
                [ -n "$openUrl" ] && echo "#!openUrl = $openUrl" >> "$plugin_file"
                [ -n "$author" ] && echo "#!author = $author" >> "$plugin_file"
                [ -n "$homepage" ] && echo "#!homepage = $homepage" >> "$plugin_file"
                if [ -n "$icon" ]; then
                    mkdir -p "tmp/$(basename "$conf_file" .conf)/icon"
                    wget -O "tmp/$(basename "$conf_file" .conf)/icon/$(basename "$conf_file" .conf).png" "$icon"
                    icon="$base_url$script_folder/$(basename "$conf_file" .conf)/icon/$(basename "$conf_file" .conf).png"
                    echo "#!icon = $icon" >> "$plugin_file"
                else
                    icon_folder="$script_folder/$(basename "$conf_file" .conf)/icon"
                    find "$script_folder/$(basename "$conf_file" .conf)" -type f -name "*.png" -print0 | while IFS= read -r -d '' file; do
                        mkdir -p "tmp/$(basename "$conf_file" .conf)/icon"
                        mv "$file" "tmp/$(basename "$conf_file" .conf)/icon/$(basename "$conf_file" .conf).png"
                        icon="$base_url$icon_folder/$(basename "$conf_file" .conf).png"
                        echo "#!icon = $icon" >> "$plugin_file"
                    done
                fi
                [ -n "$select" ] && echo "$select" | sed 's/^/#!select = /' >> "$plugin_file"
                [ -n "$input" ] && echo "$input" | sed 's/^/#!input = /' >> "$plugin_file"
                echo "#!date = $date" >> "$plugin_file"

                mitm=$(grep -i "hostname" $conf_file | awk -F '=' '{print $2}' | sed 's/^[[:space:]]*//; s/[[:space:]]*$//; s/%0D//; s/,$//; s/,\([^ ]\)/, \1/g')
                [ -z "$mitm" ] &&mitm=$(grep -i "hostname" $download_file | awk -F '=' '{print $2}' | sed 's/^[[:space:]]*//; s/[[:space:]]*$//; s/%0D//; s/,$//; s/,\([^ ]\)/, \1/g' | sed 's/%INSERT% //; s/%APPEND% //')
                script=$(sed -n '/\[Script\]/,/^\[/p' "$conf_file" | sed '/^\[/d; /^[[:space:]]*$/d')
                [ -z "$script" ] && script=$(sed -n '/\[Script\]/,/^\[/p;/\[rewrite_local\]/,/^\[/p' "$download_file" | sed '/^\[/d; /^[[:space:]]*$/d')
                rewrite=$(sed -n '/\[Rewrite\]/,/^\[/p' "$conf_file" | sed '/^\[/d; /^[[:space:]]*$/d; /^#/d')
                [ -z "$rewrite" ] && rewrite=$(sed -n '/\[URL Rewrite\]/,/^\[/p;/\[Rewrite\]/,/^\[/p' "$download_file" | sed '/^\[/d; /^[[:space:]]*$/d; /^#/d')
                general=$(sed -n '/\[General\]/,/^\[/p' "$conf_file" | sed '/^\[/d; /^[[:space:]]*$/d; /^#/d')
                [ -z "$general" ] && general=$(sed -n '/\[General\]/,/^\[/p' "$download_file" | sed '/^\[/d; /^[[:space:]]*$/d; /^#/d' | sed '/always-raw-tcp-hosts/d')
                rule=$(sed -n '/\[Rule\]/,/^\[/p' "$conf_file" | sed '/^\[/d; /^[[:space:]]*$/d; /^#/d')
                [ -z "$rule" ] && rule=$(sed -n '/\[Rule\]/,/^\[/p' "$download_file" | sed '/^\[/d; /^[[:space:]]*$/d; /^#/d')
                host=$(sed -n '/\[Host\]/,/^\[/p' "$conf_file" | sed '/^\[/d; /^[[:space:]]*$/d; /^#/d')
                [ -z "$host" ] && host=$(sed -n '/\[Host\]/,/^\[/p' "$download_file" | sed '/^\[/d; /^[[:space:]]*$/d; /^#/d')
                reject=$(echo "$script" | awk '/ reject/ {print}' | sed 's/url reject/reject/g')
                
                [ -n "$reject" ] && [ -n "$rewrite" ] && rewrite=$(printf "%s\n%s" "$rewrite" "$reject") ; script=$(echo "$script" | sed '/ reject/d')
                [ -n "$reject" ] && [ -z "$rewrite" ] && rewrite="$reject" ; script=$(echo "$script" | sed '/ reject/d')
                [ -n "$general" ] && echo -e "\n[General]\n$general" >> "$plugin_file"
                [ -n "$rewrite" ] && echo -e "\n[Rewrite]\n$rewrite" >> "$plugin_file"
                [ -n "$host" ] && echo -e "\n[Host]\n$host" >> "$plugin_file"
                [ -n "$rule" ] && echo -e "\n[Rule]\n$rule" >> "$plugin_file"
                [ -n "$script" ] && echo -e "\n[Script]\n$script" >> "$plugin_file"
                [ -n "$mitm" ] && echo -e "\n[Mitm]\nhostname = $mitm" >> "$plugin_file"
                
                # http-response
                sed -i '/script-response-body/ s/^/http-response /' "$plugin_file"
                sed -i '/script-response-body/ s/$/, requires-body = true, tag =/' "$plugin_file"
                sed -i 's/url script-response-body/script-path =/' "$plugin_file"

                # http-request
                sed -i '/script-request-\(header\|body\)/ s/^/http-request /' "$plugin_file"
                sed -i '/script-request-header/ s/$/, tag =/' "$plugin_file"
                sed -i '/script-request-body/ s/$/, requires-body = true, tag =/' "$plugin_file"
                sed -i 's/url script-request-\(header\|body\)/script-path =/' "$plugin_file"

                #tag=
                for keyword in 'http-response' 'http-request'; do
                    line_numbers=$(grep -n "$keyword" "$plugin_file" | cut -d: -f1)
                    for line_number in $line_numbers; do
                        if [ "$line_number" ]; then
                            current_line=$(sed -n "${line_number}p" "$plugin_file")
                            if [[ "$current_line" =~ [=]$ || "$current_line" =~ [=][[:space:]]$ ]]; then
                                previous_line_number=$((line_number - 1))
                                previous_line=$(sed -n "${previous_line_number}p" "$plugin_file")
                                if [[ "$previous_line" == "#"* ]]; then
                                    comment_value=$(echo "$previous_line" | sed 's/^# *//; s/^> *//')
                                    sed -i -e "${line_number}s/$/ $comment_value/" "$plugin_file"
                                else
                                    name_value=$(echo "$previous_line" | grep -o 'tag = [^ ]*' | sed 's/tag = //')
                                    [ -z "$name_value" ] && name_value=$name
                                    sed -i -e "${line_number}s/$/ $name_value/" "$plugin_file"
                                fi
                            fi
                        fi
                    done
                done
                sed -i '/^# /d' "$plugin_file"

                # script下载
                mkdir -p "tmp/$(basename "$conf_file" .conf)/script"
                while IFS= read -r line; do
                  if [[ "$line" == *"script-path"* ]]; then
                    script_download_url=$(echo "$line" | sed -n 's/^.*script-path\s*=\s*\([^,]*\).*$/\1/p')
                    wget -O "tmp/$(basename "$conf_file" .conf)/script/$(basename "$script_download_url")" "$script_download_url"
                    if ! head -n 5 "tmp/$(basename "$conf_file" .conf)/script/$(basename "$script_download_url")" | grep -q -P '(?=.*(?:来源|引用))(?=.*http).*'; then
                        sed -i '1i\/*\n脚本引用'"$script_download_url"'\n*/' "tmp/$(basename "$conf_file" .conf)/script/$(basename "$script_download_url")"
                    fi
                    # 对比script内容更新date值
                    if [ -f "tmp/$(basename "$conf_file" .conf)/script/$(basename "$script_download_url")" ] && [ -f "$script_folder/$(basename "$conf_file" .conf)/script/$(basename "$script_download_url")" ]; then
                        if ! cmp -s "tmp/$(basename "$conf_file" .conf)/script/$(basename "$script_download_url")" "$script_folder/$(basename "$conf_file" .conf)/script/$(basename "$script_download_url")"; then
                            sed -i "s/#!date.*/#!date = $current_date/" "$plugin_file"
                            grep -q '^#!date' "$conf_file" && sed -i "s/^#!date.*/#!date = $current_date/" "$conf_file" || echo -e "\n#!date = $current_date" >> "$conf_file"
                        fi
                    fi
                    full_url="$base_url$script_folder/$(basename "$conf_file" .conf)/script/$(basename "$script_download_url")"
                    sed -i "s#$(sed 's/[&/\]/\\&/g' <<< "$script_download_url")#$full_url#" "$plugin_file"
                  fi
                done < "$plugin_file"

                # 规范文件格式
                sed -i '1,/^#!date/{/^$/d}' $conf_file
                #sed -i 's/\([^[:space:]]\)\s*=\s*\([^[:space:]]\)/\1 = \2/g' $plugin_file
                #sed -i -E '/( script-path| requires-body| tag| timeout)\s*=/ s/([^[:space:]])\s*=\s*([^[:space:]])/\1 = \2/g' $plugin_file
                sed -i '/^hostname/s/,\([^ ]\)/, \1/g' $plugin_file
                
                # 对比插件内容更新date值
                grep -v '^#!date' "$plugin_file" > "plugin_new.tmp"
                if [ -f "$loon_plugin_folder/$(basename "$conf_file" .conf).plugin" ]; then
                    grep -v '^#!date' "$loon_plugin_folder/$(basename "$conf_file" .conf).plugin" > "plugin_old.tmp"
                fi
                if [ -f "plugin_new.tmp" ] && [ -f "plugin_old.tmp" ]; then
                    if ! cmp -s "plugin_new.tmp" "plugin_old.tmp"; then
                        sed -i "s/#!date.*/#!date = $current_date/" "$plugin_file"
                        grep -q '^#!date' "$conf_file" && sed -i "s/^#!date.*/#!date = $current_date/" "$conf_file" || echo -e "\n#!date = $current_date" >> "$conf_file"
                    fi
                fi
                rm -f "plugin_new.tmp" "plugin_old.tmp"
            fi
        done

        # Update loon/README.md
        mv -f tmp/*.plugin "$loon_plugin_folder/"
        process_plugin_file() {
          local file="$1"
          plugin_name=$(grep -i "#!name" "$file" | awk -F '=' '{print $2}' | tr -d '[:space:]')
          plugin_date=$(grep -i "#!date" "$file" | awk -F '=' '{print $2}' | xargs -I{} date -d "{}" +%-Y/%m/%d)
          if [ -n "$plugin_name" ]; then
            install_link="https://www.nsloon.com/openloon/import?plugin=$base_url$file"
            raw_link="$base_url$file"
            echo "| ✅[$plugin_name]($raw_link) | $plugin_date | [导入]($install_link) |" >> "$readme_file"
          fi
        }
        plugin_files=($(find "$loon_plugin_folder/" -maxdepth 1 -type f -name "*.plugin" -exec grep -H "#!date" {} + | sort -k3 -r | awk -F ':' '{print $1}'))
        readme_file="tmp/README.md"
        touch "$readme_file" && echo -e "## 🎈Loon插件\n| ⚙插件名称 | 📌更新时间 | 链接 |\n| - | - | - |" > "$readme_file"
        for file in "${plugin_files[@]}"; do
            file_base_name=$(basename "$file" .plugin)
            conf_file="$script_folder/$file_base_name.conf"
            if [ -f "$conf_file" ] && grep -qE "^#!tag\s*=\s*(常用插件|)$" "$conf_file"; then
                process_plugin_file "$file"
            fi
        done
        echo -e "#### 🔓解锁插件:\n<details>\n<summary>👆︎点击查看</summary>\n<ul>\n\n| 🔓插件名称 | 📌更新时间 | 链接 |\n| - | - | - |" >> "$readme_file"
        for file in "${plugin_files[@]}"; do
            file_base_name=$(basename "$file" .plugin)
            conf_file="$script_folder/$file_base_name.conf"
            if [ -f "$conf_file" ] && grep -qE "^#!tag\s*=\s*.*解锁.*$" "$conf_file"; then
                process_plugin_file "$file"
            fi
        done
        echo -e "</ul>\n</details>\n\n## ⚠️免责声明" >> "$readme_file"
        sed -n '/^## ⚠️免责声明$/,/^##/{/^##/!p}' README.md >> "$readme_file"
        sed -i '/## 🎈Loon插件/,$d' loon/README.md
        cat $readme_file >> loon/README.md
        
        mv -f tmp/README.md "$loon_plugin_folder/"
        cp -fr tmp/* $script_folder/
        rm -fr tmp

    - name: Commit and push
      run: |
        git config --global user.email "mphin@qq.com" && git config --global user.name "Bot"
        git add . && git commit -m "插件更新$(date +'%Y-%m-%d %H:%M')" || exit 0
        git push

    - name: Cleanup Workflow
      uses: Mattraks/delete-workflow-runs@main
      with:
        retain_days: 1
        keep_minimum_runs: 2
